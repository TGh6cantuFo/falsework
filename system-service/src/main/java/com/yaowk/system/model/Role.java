package com.yaowk.system.model;

import com.jfinal.json.Json;
import com.jfinal.kit.Kv;
import com.jfinal.plugin.activerecord.SqlPara;
import com.xiaoleilu.hutool.util.CollectionUtil;
import com.yaowk.common.constant.CacheConstant;
import com.yaowk.common.kit.DbCacheKit;
import com.yaowk.common.model.base.Page;
import com.yaowk.common.plugin.FindKv;
import com.yaowk.system.model.base.BaseRole;

import java.util.List;
import java.util.Map;

;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Role extends BaseRole<Role> {
    public static final Role dao = new Role().dao();
    protected static final String tableName = "sys_role";

    public List<Role> find(Map condition) {
        FindKv kv = FindKv.create().setCondition(condition).setTable(tableName);
        SqlPara sqlPara = getSqlPara("find", kv);
        String key = "Role:find:" + Json.getJson().toJson(kv);
        DbCacheKit.addKey(key);
        return findByCache(CacheConstant.DB, key, sqlPara.getSql(), sqlPara.getPara());
    }

    public List<Role> findByUserId(Integer userId) {
        SqlPara sqlPara = getSqlPara("role.findByUserId", userId);
        String key = "Role:findByUserId" + userId;
        DbCacheKit.addKey(key);
        return findByCache(CacheConstant.DB, key, sqlPara.getSql(), sqlPara.getPara());
    }

    public com.jfinal.plugin.activerecord.Page<Role> paginate(Page page, Map condition) {
        FindKv kv = FindKv.create().setCondition(condition).setTable(tableName);
        SqlPara sqlPara = getSqlPara("paginate-except", kv);
        Json json = Json.getJson();
        String key = "Role:paginate:" + json.toJson(page) + json.toJson(kv);
        DbCacheKit.addKey(key);
        return paginateByCache(CacheConstant.DB, key, page.getPageNumber(), page.getPageSize(), getSql("paginate-select"), sqlPara.getSql(), sqlPara.getPara());
    }

    @Override
    public boolean save() {
        DbCacheKit.removeCacheStarWith("Role:paginate");
        return super.save();
    }

    @Override
    public boolean update() {
        DbCacheKit.removeCacheStarWith("Role");
        return super.update();
    }

    @Override
    public boolean delete() {
        Integer roleId = getId();
        Kv condition = Kv.by("role_id = ", roleId);
        // 删除用户角色关系
        List<UserRole> userRoles = UserRole.dao.find(condition);
        if (CollectionUtil.isNotEmpty(userRoles)) {
            for (UserRole userRole : userRoles) {
                userRole.delete();
            }
        }

        // 删除角色按钮关系
        List<RoleMenu> roleMenus = RoleMenu.dao.find(condition);
        if (CollectionUtil.isNotEmpty(roleMenus)) {
            for (RoleMenu roleMenu : roleMenus) {
                roleMenu.delete();
            }
        }
        DbCacheKit.removeCacheStarWith("Role");
        return super.delete();
    }
}
