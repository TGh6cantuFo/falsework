package com.yaowk.user.model;

import com.jfinal.kit.Kv;
import com.jfinal.plugin.activerecord.SqlPara;
import com.xiaoleilu.hutool.util.CollectionUtil;
import com.yaowk.common.constant.CacheConstant;
import com.yaowk.common.kit.DbCacheKit;
import com.yaowk.common.plugin.FindKv;
import com.yaowk.user.model.base.BaseMenu;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Menu extends BaseMenu<Menu> {
    public static final Menu dao = new Menu().dao();
    protected static final String tableName = "sys_menu";

    public List<Menu> find(Map condition) {
        FindKv kv = FindKv.create().setCondition(condition).setTable(tableName);
        SqlPara sqlPara = getSqlPara("find", kv);
        return find(sqlPara);
    }

    public List<Menu> findByRoleId(Integer roleId) {
        SqlPara sqlPara = getSqlPara("menu.findByRoleId", roleId);
        String key = "user:menu:findByRoleId:" + roleId;
        DbCacheKit.addKey(key);
        return findByCache(CacheConstant.DB, key, sqlPara.getSql(), sqlPara.getPara());
    }

    @Override
    public boolean update() {
        DbCacheKit.removeCacheStarWith("user:menu");
        return super.update();
    }

    @Override
    public boolean delete() {
        Kv condition = Kv.by("menu_id = ", getId());
        List<RoleMenu> roleMenus = RoleMenu.dao.find(condition);
        for (RoleMenu roleMenu : roleMenus) {
            roleMenu.delete();
        }
        DbCacheKit.removeCacheStarWith("user:menu");
        return super.delete();
    }

    /**
     * 获取用户的按钮
     *
     * @param userId
     * @return
     */
    public List<Menu> getMenuByUserId(Integer userId) {
        List<Menu> menuList = new ArrayList<>();
        List<Role> roles = Role.dao.findByUserId(userId);
        if (CollectionUtil.isNotEmpty(roles)) {
            for (Role role : roles) {
                List<Menu> menus = Menu.dao.findByRoleId(role.getId());
                if (CollectionUtil.isNotEmpty(menus)) {
                    for (Menu menu : menus) {
                        menuList.add(menu.clone());
                    }
                }
            }
        }
        return menuList;
    }

    /**
     * 将按钮按照父子关系处理
     *
     * @param menuList
     * @return
     */
    public List<Menu> parseMenu(List<Menu> menuList) {
        List<Menu> menus = new ArrayList<>();
        for (Menu m : menuList) {
            if (m.getParentId() == 0) {
                menus.add(m);
                findMenuByParentId(menuList, m, m.getId());
            }
        }
        return menus;
    }

    private void findMenuByParentId(List<Menu> menuList, Menu menu, Integer parentId) {
        menu.setChildren(new HashMap<>());
        for (Menu m : menuList) {
            if (m.getParentId() == parentId) {
                m.setParent(menu);
                menu.getChildren().put(m.getId(), m);
                findMenuByParentId(menuList, m, m.getId());
            }
        }
    }

    private Map<Integer, Menu> children;
    private Menu parent;

    public Menu getParent() {
        return parent;
    }

    public void setParent(Menu parent) {
        this.parent = parent;
    }

    public Map<Integer, Menu> getChildren() {
        return children;
    }

    public void setChildren(Map<Integer, Menu> children) {
        this.children = children;
    }

    @Override
    public Menu clone() {
        return new Menu()
                .setId(getId())
                .setName(getName())
                .setCreateTime(getCreateTime())
                .setDescription(getDescription())
                .setOpened(getOpened())
                .setParentId(getParentId())
                .setPermission(getPermission())
                .setSort(getSort())
                .setStatus(getStatus())
                .setType(getType())
                .setUrl(getUrl());
    }
}
